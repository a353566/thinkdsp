
### test 1 ###

df = pd.read_csv('coindesk-bpi-USD-close.csv', nrows=2115, parse_dates=[0])
print(len(df))


### test 2 ###
import numpy as np

f= open('coindesk-bpi-USD-close.csv')
s= f.read()
sL= s.split('\n')
xL= [x.split(',')[-1] for x in sL]
yL= [float(x) for x in xL[1:-4]]
priceData= np.array(yL)

def movingAverage(x, length):
    y= np.convolve(x, np.ones(length)/length)
    y= y[:len(x)]
    return y

ma100=  movingAverage(priceData, 100)
ma500=  movingAverage(priceData, 500)
ma1000= movingAverage(priceData, 1000)

pl.plot(priceData)
pl.plot(ma100)
pl.plot(ma500)
pl.plot(ma1000)


### test 3 ###
import numpy as np

f= open('coindesk-bpi-USD-close.csv')
s= f.read()
sL= s.split('\n')
xL= [x.split(',')[-1] for x in sL]
yL= [float(x) for x in xL[1:-4]]
priceData= np.array(yL)

def movingAverage(x, length):
    y= np.convolve(x, np.ones(length)/length)
    y= y[:len(x)]
    return y

ma100=  movingAverage(priceData, 100)
ma500=  movingAverage(priceData, 500)
ma1000= movingAverage(priceData, 1000)

print(priceData[1000:1005])
print(ma100[1000:1005])
print(ma500[1000:1005])
print(ma1000[1000:1005])


### test 4 ###
import thinkdsp
import thinkplot

import numpy as np
import pandas as pd

df = pd.read_csv('coindesk-bpi-USD-close.csv', nrows=2115, parse_dates=[0])
ys = df.Close.values
ts = np.arange(len(ys))

wave = thinkdsp.Wave(ys, ts, framerate=1)
#wave.plot()
thinkplot.config(xlabel='Time (days)')

spectrum = wave.make_spectrum()
spectrum.plot_power()
thinkplot.config(xlabel='Frequency (1/days)', ylabel='Power', xscale='log', yscale='log')


### test 5 6 ###
import thinkdsp
import thinkplot

import pandas as pd

df = pd.read_csv('coindesk-bpi-USD-close.csv', nrows=2115, parse_dates=[0])

duration = len(df)
framerate = 512
linewidth = 1

signal = thinkdsp.UncorrelatedGaussianNoise()
white = signal.make_wave(duration=duration, framerate=framerate)

signal = thinkdsp.PinkNoise()
pink = signal.make_wave(duration=duration, framerate=framerate)

signal = thinkdsp.BrownianNoise()
red = signal.make_wave(duration=duration, framerate=framerate)

white.plot(label='wNoise', color='#000000', linewidth=linewidth)
pink.plot(label='pNoise', color='#ff8888', linewidth=linewidth)
red.plot(label='rNoise', color='#ff0000', linewidth=linewidth)

thinkplot.config(xlabel='Time', ylim=[-6, 6], xlim=[0, len(df)], legend=True)


### test 7 ###
import thinkdsp
import thinkplot

import numpy as np
import pylab as pl
import pandas as pd

df = pd.read_csv('coindesk-bpi-USD-close.csv', nrows=2115, parse_dates=[0])

duration = len(df)
framerate = 512
linewidth = 1

def make_spectrum(signal):
    wave = signal.make_wave(duration=duration, framerate=framerate)
    spectrum = wave.make_spectrum()
    spectrum.hs[0] = 0
    return spectrum
    
signal = thinkdsp.UncorrelatedGaussianNoise()
white = make_spectrum(signal)

signal = thinkdsp.PinkNoise()
pink = make_spectrum(signal)

signal = thinkdsp.BrownianNoise()
red = make_spectrum(signal)

white.plot_power(label='wSpec', color='#000000', linewidth=linewidth)
pink.plot_power(label='pSpec', color='#ff8888', linewidth=linewidth)
red.plot_power(label='rSpec', color='#ff0000', linewidth=linewidth)

thinkplot.config(xlabel='Frequency', ylabel='Power', xscale='log', yscale='log')
#thinkplot.config(ylim=[0, 20], xlim=[0, len(df)], legend=True)


### test 8 ###
import thinkdsp
import thinkplot

import numpy as np
import pandas as pd

df = pd.read_csv('coindesk-bpi-USD-close.csv', nrows=2115, parse_dates=[0])
ys = df.Close.values
ts = np.arange(len(ys))

wave = thinkdsp.Wave(ys, ts, framerate=1)
#wave.plot()
thinkplot.config(xlabel='Time (days)')

spectrum = wave.make_spectrum()
spectrum.plot_power()

duration = len(df)
framerate = 512
linewidth = 1

def make_spectrum(signal):
    wave = signal.make_wave(duration=duration, framerate=framerate)
    spectrum = wave.make_spectrum()
    spectrum.hs[0] = 0
    return spectrum
    
signal = thinkdsp.UncorrelatedGaussianNoise()
white = make_spectrum(signal)

signal = thinkdsp.PinkNoise()
pink = make_spectrum(signal)

signal = thinkdsp.BrownianNoise()
red = make_spectrum(signal)

white.plot_power(label='wSpec', color='#000000', linewidth=linewidth)
pink.plot_power(label='pSpec', color='#ff8888', linewidth=linewidth)
red.plot_power(label='rSpec', color='#ff0000', linewidth=linewidth)

thinkplot.config(xlabel='Frequency', ylabel='Power', xscale='log', yscale='log')


